AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda to check Mongo database health

Metadata:
  AWS::ServerlessRepo::Application:
    Name: "lambda-mongo-health-check"
    Description: "This is a Lambda to check the health of a Mongo database running on an EC2"
    Author: "Sage-Bionetworks"
    SpdxLicenseId: "Apache-2.0"
    # paths are relative to .aws-sam/build directory
    LicenseUrl: "LICENSE"
    ReadmeUrl: "README.md"
    Labels: ["serverless", "custom-resource", "mongo", "database"]
    HomePageUrl: "https://github.com/Sage-Bionetworks-IT/lambda-mongo-health-check"
    SemanticVersion: "0.0.2"
    SourceCodeUrl: "https://github.com/Sage-Bionetworks-IT/lambda-mongo-health-check/tree/0.0.2"

Globals:
  Function:
    Timeout: 3

Parameters:
  Host:
    Description: "The DB Host (IP or DNS name)"
    Type: String
  Port:
    Description: "The DB port"
    Default: 27017
    Type: Number
  Database:
    Description: "The DB name"
    Default: None
    Type: String
  DbUser:
    Description: "The DB user name"
    Default: "admin"
    Type: String
  DbPassword:
    Description: "The DB password"
    Type: String
    NoEcho: 'true'
  SubnetIds:
    Description: "The DB Subnet ID"
    Type: String
  SecurityGroupIds:
    Description: "The security group to access the DB"
    Type: String
  Schedule:
    Description: Schedule to execute this lambda
    Type: String
    Default: rate(1 day)
    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.htm"
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: mongo_health_check/
      Handler: app.handler
      Runtime: python3.7
      Role: !GetAtt FunctionRole.Arn
      VpcConfig:
        SubnetIds:
          - Ref: SubnetIds
        SecurityGroupIds:
          - Ref: SecurityGroupIds
      Events:
        RecurringSchedule:
          Type: Schedule
          Properties:
            Schedule: !Ref Schedule
        CheckApi:
          Type: Api
          Properties:
            Path: /check
            Method: get
      Environment:
        Variables:
          HOST: !Ref Host
          PORT: !Ref Port
          DATABASE: !Ref Database
          DBUSER: !Ref DbUser
          DBPASSWORD: !Ref DbPassword
  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref FunctionPolicy
  FunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'ec2:*'
            Resource: '*'
Outputs:
  FunctionApi:
    Description: "API Gateway Host URL for Prod stage for mongo check function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/check/"
  FunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt Function.Arn
  FunctionRoleArn:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt FunctionRole.Arn
